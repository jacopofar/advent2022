1
00:00:00,000 --> 00:00:05,000
Welcome to Day 3 of AntVent Of Code 2022.

2
00:00:05,000 --> 00:00:09,000
Today's problem gives us a series of strings,

3
00:00:09,000 --> 00:00:12,000
each string has an even number of elements,

4
00:00:12,000 --> 00:00:15,000
which are letters of the English alphabet,

5
00:00:15,000 --> 00:00:17,000
lowercase and uppercase.

6
00:00:17,000 --> 00:00:20,000
What we have to do is, for each string,

7
00:00:20,000 --> 00:00:22,000
find the letter,

8
00:00:22,000 --> 00:00:25,000
and the fact that it is uppercase and lowercase is important,

9
00:00:25,000 --> 00:00:27,000
so they are different,

10
00:00:27,000 --> 00:00:30,000
which appears in the first and second half of each string.

11
00:00:30,000 --> 00:00:33,000
There is always one and only one.

12
00:00:33,000 --> 00:00:38,000
For example, in this case, we see that the lowercase p

13
00:00:38,000 --> 00:00:42,000
appears only here and here,

14
00:00:42,000 --> 00:00:45,000
so this is the letter we have to find.

15
00:00:45,000 --> 00:00:49,000
For each string in this list we have to find this letter,

16
00:00:49,000 --> 00:00:54,000
then we have to calculate a score corresponding to this letter.

17
00:00:54,000 --> 00:00:58,000
The score will be, if the letter is lowercase,

18
00:00:58,000 --> 00:01:03,000
a number that goes from 1 to 26 for all alphabet letters,

19
00:01:03,000 --> 00:01:07,000
then the lowercase is 1 and the lowercase is 26,

20
00:01:07,000 --> 00:01:11,000
if instead it is uppercase, we go from 27 to 52,

21
00:01:11,000 --> 00:01:17,000
then the uppercase A is 27, the lowercase A is 28 and so on,

22
00:01:17,000 --> 00:01:20,000
until we get to the Z, which is 52.

23
00:01:20,000 --> 00:01:24,000
Today, to do things better,

24
00:01:24,000 --> 00:01:27,000
I have already created the beginning of my problem,

25
00:01:27,000 --> 00:01:30,000
so I have already set my code and I have already saved the file.

26
00:01:30,000 --> 00:01:34,000
So we have a get_input function

27
00:01:34,000 --> 00:01:38,000
that already provides us with the list of all these strings.

28
00:01:38,000 --> 00:01:42,000
So the part 1, we can do it directly like this.

29
00:01:42,000 --> 00:01:46,000
Let's start by creating a counter,

30
00:01:46,000 --> 00:01:50,000
actually no, let's start with finding these letters that interest us,

31
00:01:50,000 --> 00:01:52,000
so these repeated letters.

32
00:01:52,000 --> 00:01:57,000
For each line, which we call a rucksack,

33
00:01:57,000 --> 00:02:00,000
because this is what is represented by the line,

34
00:02:00,000 --> 00:02:03,000
so a bag essentially,

35
00:02:03,000 --> 00:02:08,000
in the input, so the input of the problem,

36
00:02:08,000 --> 00:02:13,000
we have to find what is at the beginning and at the end of this...

37
00:02:13,000 --> 00:02:16,000
we have to divide them in half,

38
00:02:16,000 --> 00:02:23,000
so I say that L, which is a num for number,

39
00:02:23,000 --> 00:02:27,000
is the length of the rucksack,

40
00:02:27,000 --> 00:02:39,000
then I say look, part 1 is rucksack until nun

41
00:02:39,000 --> 00:02:49,000
and part 2 is the rucksack from nun onwards.

42
00:02:49,000 --> 00:02:54,000
I'm not sure of the indices, I never remember this,

43
00:02:54,000 --> 00:02:57,000
so what do I do? I open my Python console

44
00:02:57,000 --> 00:03:10,000
and I say look, rucksack is equal to abcdef, while at it,

45
00:03:10,000 --> 00:03:15,000
nun is the length of the rucksack in this case will be 6

46
00:03:15,000 --> 00:03:20,000
and part 1 will be equal to this thing here,

47
00:03:20,000 --> 00:03:29,000
so part 1, (what...) which obviously I have to divide by 2,

48
00:03:29,000 --> 00:03:32,000
indeed I do it directly here,

49
00:03:32,000 --> 00:03:36,000
so number is this thing divided by 2,

50
00:03:36,000 --> 00:03:41,000
here we arrive at noon and then from noon onwards we do this other thing,

51
00:03:41,000 --> 00:03:47,000
so we try again, number is the length, so 3,

52
00:03:47,000 --> 00:03:54,000
part 1 will be what?

53
00:03:54,000 --> 00:03:57,000
Obviously we want the division that gives us the whole number,

54
00:03:57,000 --> 00:04:00,000
so we do it again,

55
00:04:00,000 --> 00:04:03,000
noon now is the whole number, 3,

56
00:04:03,000 --> 00:04:08,000
and part 1 will be, let's see what it contains, abc, perfect,

57
00:04:08,000 --> 00:04:21,000
while part 2 is from noon onwards and contains df, perfect.

58
00:04:21,000 --> 00:04:23,000
At this point I want to find the letter in common,

59
00:04:23,000 --> 00:04:28,000
taking advantage of the fact that a string in Python can be seen as a list of characters,

60
00:04:28,000 --> 00:04:33,000
I can directly make a set with the letters of part 1,

61
00:04:33,000 --> 00:04:37,000
make a set with the letters of part 2

62
00:04:37,000 --> 00:04:39,000
and use an ampersand,

63
00:04:39,000 --> 00:04:46,000
the iComampersandmercial for the set is simply a way of performing the operation intersect,

64
00:04:46,000 --> 00:04:48,000
intersection, sorry,

65
00:04:48,000 --> 00:04:50,000
intersection gives us the common elements between these two sets,

66
00:04:50,000 --> 00:04:54,000
so take the two strings, the two pieces of string,

67
00:04:54,000 --> 00:04:57,000
create a set and find the intersection,

68
00:04:57,000 --> 00:05:00,000
this set will be composed of a single element,

69
00:05:00,000 --> 00:05:06,000
so we call it common,

70
00:05:06,000 --> 00:05:10,000
and at this point the letter that I found,

71
00:05:10,000 --> 00:05:12,000
therefore the letter in common,

72
00:05:12,000 --> 00:05:13,000
will be what?

73
00:05:13,000 --> 00:05:15,000
It will be the only common element,

74
00:05:15,000 --> 00:05:22,000
so I say assert length of common is 1,

75
00:05:22,000 --> 00:05:26,000
I want to make sure there are no bugs,

76
00:05:26,000 --> 00:05:29,000
and common is the set with that letter.

77
00:05:29,000 --> 00:05:34,000
While at it, I can avoid creating a variable for part 1 and part 2,

78
00:05:34,000 --> 00:05:37,000
but I use them directly.

79
00:05:37,000 --> 00:05:41,000
Ok, and so I found the letter in common,

80
00:05:41,000 --> 00:05:46,000
common is a string set,

81
00:05:46,000 --> 00:05:55,000
I can find the letter in common saying that it is a list that derives from common,

82
00:05:55,000 --> 00:05:58,000
because I cannot take an element only from the set,

83
00:05:58,000 --> 00:06:00,000
I have to transform it into a list,

84
00:06:00,000 --> 00:06:02,000
and then take the zero element.

85
00:06:02,000 --> 00:06:05,000
Another thing I could do is iterate on the set,

86
00:06:05,000 --> 00:06:10,000
let's say next,

87
00:06:10,000 --> 00:06:12,000
we can try in the shell directly,

88
00:06:12,000 --> 00:06:18,000
so next is set containing the letter a,

89
00:06:18,000 --> 00:06:21,000
no,

90
00:06:21,000 --> 00:06:23,000
I have to do something more complicated,

91
00:06:23,000 --> 00:06:25,000
so I keep it like this, who cares,

92
00:06:25,000 --> 00:06:28,000
I make a list,

93
00:06:28,000 --> 00:06:31,000
so from the set of an element to a list of a single element,

94
00:06:31,000 --> 00:06:33,000
I take the number zero,

95
00:06:33,000 --> 00:06:35,000
so the only letter that is inside,

96
00:06:35,000 --> 00:06:39,000
I made an assertion, so I already know that there is only one, so I'm sure,

97
00:06:39,000 --> 00:06:41,000
and this is the first part, I found the letter.

98
00:06:41,000 --> 00:06:43,000
Now I have to calculate the score,

99
00:06:43,000 --> 00:06:49,000
so I create a variable int that contains the return value,

100
00:06:49,000 --> 00:06:51,000
which will be zero initially,

101
00:06:51,000 --> 00:06:56,000
here I will calculate the score in some way and then return ret,

102
00:06:56,000 --> 00:07:02,000
this is the usual boilerplate way to calculate a sum.

103
00:07:02,000 --> 00:07:05,000
Now I have to calculate the score assigned to a letter,

104
00:07:05,000 --> 00:07:12,000
so I create a function that I will call item_value,

105
00:07:12,000 --> 00:07:14,000
which given a letter l,

106
00:07:14,000 --> 00:07:18,000
gives back an integer which is its value,

107
00:07:18,000 --> 00:07:24,000
so the problem tells us that,

108
00:07:24,000 --> 00:07:27,000
we directly copy the definition,

109
00:07:27,000 --> 00:07:35,000
so it becomes directly a comment that I insert here,

110
00:07:35,000 --> 00:07:36,000
I say ok look,

111
00:07:36,000 --> 00:07:39,000
first of all I want to know if this letter is lowercase or uppercase,

112
00:07:39,000 --> 00:07:47,000
so I say if L is lower, I think,

113
00:07:47,000 --> 00:07:50,000
so is lower tells me if it is lowercase or uppercase,

114
00:07:50,000 --> 00:07:51,000
I know that this is a single letter,

115
00:07:51,000 --> 00:07:57,000
so I'm not worrying too much.

116
00:07:57,000 --> 00:07:58,000
How do I do it?

117
00:07:58,000 --> 00:08:02,000
I can create my dictionary or I can use the ord function,

118
00:08:02,000 --> 00:08:09,000
which tells me the number of the code point that represents this character,

119
00:08:09,000 --> 00:08:15,000
so each character has an associated number,

120
00:08:15,000 --> 00:08:19,000
and for English alphabet letters these numbers are consecutive,

121
00:08:19,000 --> 00:08:23,000
so I don't remember which one is minuscule,

122
00:08:23,000 --> 00:08:25,000
we can see it,

123
00:08:25,000 --> 00:08:27,000
but we are only interested in the difference,

124
00:08:27,000 --> 00:08:31,000
so it's 97 for the lowercase and 98 and so on,

125
00:08:31,000 --> 00:08:32,000
so I say look,

126
00:08:32,000 --> 00:08:42,000
make a difference between the character we have here, ord of L, and the lowercase,

127
00:08:42,000 --> 00:08:44,000
so we find a difference,

128
00:08:44,000 --> 00:08:46,000
we find a position in the English alphabet,

129
00:08:46,000 --> 00:08:50,000
and obviously we have to add 1,

130
00:08:50,000 --> 00:08:54,000
because if it is the lowercase the ord code will be the same and the difference 0,

131
00:08:54,000 --> 00:08:56,000
but we have to start from 1,

132
00:08:56,000 --> 00:08:59,000
so we return this thing,

133
00:08:59,000 --> 00:09:03,000
otherwise if it is uppercase we do the same thing,

134
00:09:03,000 --> 00:09:06,000
but with the uppercase A of course,

135
00:09:06,000 --> 00:09:08,000
and this time we don't add 1 anymore,

136
00:09:08,000 --> 00:09:11,000
we don't add 1 but 27,

137
00:09:11,000 --> 00:09:13,000
and that's it.

138
00:09:13,000 --> 00:09:23,000
So now all we have to do is add ret, ret plus equal,

139
00:09:23,000 --> 00:09:28,000
as we called it, item_value of letter,

140
00:09:28,000 --> 00:09:29,000
and that's it,

141
00:09:29,000 --> 00:09:32,000
so let's try to execute our exercise,

142
00:09:32,000 --> 00:09:36,000
in fact let's do a nice pdm run black because we like it,

143
00:09:36,000 --> 00:09:41,000
perfect,

144
00:09:41,000 --> 00:09:45,000
pdm run also mypy strict because we are evil,

145
00:09:45,000 --> 00:09:48,000
oh noes, there is a return that is missing here of course,

146
00:09:48,000 --> 00:09:52,000
because we return minus 1,

147
00:09:52,000 --> 00:09:55,000
in reality we don't care because this is the part 2 that we will implement later,

148
00:09:55,000 --> 00:09:56,000
perfect,

149
00:09:56,000 --> 00:09:58,000
and we execute our program,

150
00:09:58,000 --> 00:10:03,000
so,

151
00:10:03,000 --> 00:10:05,000
you hear the scream because of my neighbor,

152
00:10:05,000 --> 00:10:08,000
so we have 7997,

153
00:10:08,000 --> 00:10:11,000
perfect, this should be the solution,

154
00:10:11,000 --> 00:10:13,000
if there are no errors, or maybe there are,

155
00:10:13,000 --> 00:10:15,000
ok, correct,

156
00:10:15,000 --> 00:10:18,000
well, let's move on to part 2,

157
00:10:18,000 --> 00:10:23,000
blah blah blah,

158
00:10:23,000 --> 00:10:28,000
so every group of 3 elves is the only one loaded with 3 elves,

159
00:10:28,000 --> 00:10:33,000
so ok, to be quick we don't have to deal with the problem,

160
00:10:33,000 --> 00:10:37,000
so let's see the first 3 lines are these here,

161
00:10:37,000 --> 00:10:40,000
so the first group,

162
00:10:40,000 --> 00:10:44,000
the only element that appears in all 3 is the lowercase R,

163
00:10:44,000 --> 00:10:47,000
so we have to find an element that appears in 3 consecutive lines,

164
00:10:47,000 --> 00:10:50,000
so 3 consecutive bags,

165
00:10:50,000 --> 00:10:54,000
in the second group the common element is the capital Z,

166
00:10:54,000 --> 00:11:00,000
blah blah blah,

167
00:11:00,000 --> 00:11:03,000
ok, and the priority,

168
00:11:03,000 --> 00:11:06,000
I think it's the same as before,

169
00:11:06,000 --> 00:11:11,000
so the lowercase R is 18, so the function that gives us the value, we can find it,

170
00:11:11,000 --> 00:11:15,000
and we have to find the sum of the priorities for each of these elements,

171
00:11:15,000 --> 00:11:22,000
so basically we have to do the same thing that we did now,

172
00:11:22,000 --> 00:11:25,000
but instead of working on half of these bags,

173
00:11:25,000 --> 00:11:27,000
we have to work on groups of 3 bags,

174
00:11:27,000 --> 00:11:29,000
and find the common element,

175
00:11:29,000 --> 00:11:36,000
so for part 2, we brutally copy the code from part 1,

176
00:11:36,000 --> 00:11:40,000
with the difference that, how do we do it,

177
00:11:40,000 --> 00:11:44,000
let's create a nice index,

178
00:11:44,000 --> 00:11:48,000
that works on a range that goes from 0,

179
00:11:48,000 --> 00:11:50,000
0 can be omitted,

180
00:11:50,000 --> 00:11:53,000
to the size of the input problem and with step 3,

181
00:11:53,000 --> 00:11:56,000
the range function practically gives me all,

182
00:11:56,000 --> 00:11:59,000
it's an iterator that goes from 0,

183
00:11:59,000 --> 00:12:02,000
in this case, to the length of the input problem,

184
00:12:02,000 --> 00:12:07,000
so it goes from 0 to how many elements I have,

185
00:12:07,000 --> 00:12:13,000
with a step 3, so it will give me 0, 3, 6, 9 and so on,

186
00:12:13,000 --> 00:12:17,000
and that's it, so now I want to find the 3,

187
00:12:17,000 --> 00:12:22,000
I no longer have a rucksack, a line divided in 2,

188
00:12:22,000 --> 00:12:24,000
but I have 3 consecutive lines,

189
00:12:24,000 --> 00:12:26,000
what do I say?

190
00:12:26,000 --> 00:12:28,000
in common I have,

191
00:12:28,000 --> 00:12:30,000
which is actually easier to define,

192
00:12:30,000 --> 00:12:35,000
I have problem_input at the position idx,

193
00:12:35,000 --> 00:12:45,000
problem_input at the position idx plus 1,

194
00:12:45,000 --> 00:12:53,000
and I have problem_input at the position idx plus 2,

195
00:12:53,000 --> 00:13:01,000
I'm pretty sure this operator can be associated in this way,

196
00:13:01,000 --> 00:13:07,000
and this is part 2, let's see if it's already correct,

197
00:13:07,000 --> 00:13:10,000
let's run it,

198
00:13:10,000 --> 00:13:15,000
so I copy this thing,

199
00:13:15,000 --> 00:13:17,000
it's correct, good good good,

200
00:13:17,000 --> 00:13:19,000
it was easier than expected,

201
00:13:19,000 --> 00:13:23,000
bye everyone and see you next day.

